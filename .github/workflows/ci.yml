name: Django CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    
env:
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  # USE_CLOUD_SQL_AUTH_PROXY: 'ovie'
  # GOOGLE_APPLICATION_CREDENTIALS : ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  # GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  # GS_BUCKET_NAME: ${{ secrets.GS_BUCKET_NAME }}
  # EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
  # EMAIL_HOST : ${{ secrets.EMAIL_HOST }}
  # EMAIL_PORT : ${{ secrets.EMAIL_PORT }}
  # EMAIL_HOST_USER : ${{ secrets.EMAIL_HOST_USER }}
  # EMAIL_HOST_PASSWORD : ${{ secrets.EMAIL_HOST_PASSWORD }}
  # DB_ENGINE : ${{ secrets.DB_ENGINE }}
  USE_CLOUD_SQL_AUTH_PROXY: 'ovie'

#   DATABASE_URL: postgres://admin:_edufox@123A@//cloudsql/edufox-services:us-central1:edufox-db-instance/edufox_db
#   GS_BUCKET_NAME: edufox-bucket
#   EMAIL_BACKEND: django.core.mail.backends.smtp.EmailBackend
#   EMAIL_HOST: smtp.gmail.com
#   EMAIL_PORT: 587
#   EMAIL_HOST_USER: app.edufox@gmail.com
#   EMAIL_HOST_PASSWORD: sofeipbagutmjhkc
    

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9, 3.10.8]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
        # export_default_credentials: true

      # env:
      #   GOOGLE_APPLICATION_CREDENTIALS : ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

    - name: Build containers
      # env:
      #   GOOGLE_CREDENTIALS : ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      #   USE_CLOUD_SQL_AUTH_PROXY: ${{ env.USE_CLOUD_SQL_AUTH_PROXY }}
      #   SECRET_KEY: ${{ env.SECRET_KEY }}
      #   DATABASE_URL: ${{ env.DATABASE_URL }}

      run: docker-compose up -d --build
  
    - name: Run Tests
      env:
        # GOOGLE_APPLICATION_CREDENTIALS: ${{ env.GOOGLE_GHA_CREDS_PATH }}
        
        SECRET_KEY: ${{ env.SECRET_KEY }}
        USE_CLOUD_SQL_AUTH_PROXY: ${{ env.USE_CLOUD_SQL_AUTH_PROXY }}
        # GOOGLE_CLOUD_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}
        DATABASE_URL: ${{ env.DATABASE_URL }}
        # GS_BUCKET_NAME: ${{ env.GS_BUCKET_NAME }}
        # EMAIL_BACKEND: ${{ env.EMAIL_BACKEND }}
        # EMAIL_HOST : ${{ env.EMAIL_HOST }}
        # EMAIL_PORT : ${{ env.EMAIL_PORT }}
        # EMAIL_HOST_USER : ${{ env.EMAIL_HOST_USER }}
        # EMAIL_HOST_PASSWORD : ${{ env.EMAIL_HOST_PASSWORD }}
        # DB_ENGINE : ${{ env.DB_ENGINE }}

      run: docker-compose run --rm -e REUSE_DB=1 -e TESTING=True app python manage.py test --keepdb
      # run: echo "KEY, $GOOGLE_APPLICATION_CREDENTIALS."

            # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

    # Authenticate Docker to Google Cloud Artifact Registry
    - name: Docker Auth
      id: docker-auth
      uses: 'docker/login-action@v1'
      with:
        username: 'oauth2accesstoken'
        password: '${{ steps.auth.outputs.access_token }}'
        registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

    - name: Build and Push Container
      run: |-
        docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}" ./
        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"

    # END - Docker auth and build

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v0
      with:
        service: ${{ env.SERVICE }}
        region: ${{ env.REGION }}
        # NOTE: If using a pre-built image, update the image name here
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

    # If required, use the Cloud Run url output in later steps
    - name: Show Output
      run: echo ${{ steps.deploy.outputs.url }}