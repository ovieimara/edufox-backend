"""
Django settings for edufox project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
# from decouple import config
import environ
import os
import io
import google.auth
from google.cloud import secretmanager
from urllib.parse import urlparse
from google.oauth2 import service_account


env = environ.Env(DEBUG=(bool, True))
# environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# environ.Env.read_env(os.path.join(BASE_DIR, '.env'))
# SECRET_KEY = os.environ.get('SECRET_KEY')

# env = environ.Env(
#     SECRET_KEY=(str, os.environ.get("SECRET_KEY")),
#     DATABASE_URL=(os.environ.get("DATABASE_URL")),
#     GS_BUCKET_NAME=(str, os.environ.get("GS_BUCKET_NAME")),
# )
# print('DATABASE_URL', os.getenv('DATABASE_URL'))
# placeholder = (
#         f"SECRET_KEY=django-insecure-5xh$hw9%n$huk$mql=%r7p@dxefh9+hleb7yb$eo_6p)r*$dn^\n"
#         "GS_BUCKET_NAME=edufox-bucket\n"
#         f"DATABASE_URL={os.getenv('DATABASE_URL')}"
#     )
# env.read_env(io.StringIO(placeholder))

# env_file = os.path.join(BASE_DIR, ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# Attempt to load the Project ID into the environment, safely failing on error.
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = "./creds.json"
os.environ['USE_CLOUD_SQL_AUTH_PROXY'] = 'true'
# os.environ['DATABASE_URL'] = ''
# # os.environ['GS_BUCKET_NAME'] = ''
# # os.environ['EMAIL_BACKEND'] = ''
# # os.environ['EMAIL_HOST'] = ''
# # os.environ['EMAIL_PORT'] = ''
# # os.environ['EMAIL_HOST_USER'] = ''
# # os.environ['EMAIL_HOST_PASSWORD'] = ''
# # os.environ['DB_ENGINE'] = ''

# try:
#     _, os.environ["GOOGLE_CLOUD_PROJECT"] = google.auth.default()
# except google.auth.exceptions.DefaultCredentialsError:
#     pass

# if os.path.isfile(env_file):
#     # Use a local secret file, if provided
#     # print('ovie')
#     env.read_env(env_file)
# # ...
# # [START_EXCLUDE]
# elif os.environ.get("GITHUB_ACTIONS", None):
#     # Create local settings if running with CI, for unit testing

#     placeholder = (
#         f"SECRET_KEY=django-insecure-5xh$hw9%n$huk$mql=%r7p@dxefh9+hleb7yb$eo_6p)r*$dn^\n"
#         "GS_BUCKET_NAME=edufox-bucket\n"
#         f"DATABASE_URL=postgres://admin:_edufox@123A@//cloudsql/edufox-services:us-central1:edufox-db-instance/edufox_db"
#     )
#     env.read_env(io.StringIO(placeholder))
# # [END_EXCLUDE]
# elif os.environ.get("GOOGLE_CLOUD_PROJECT", None):
    # Pull secrets from Secret Manager

project_id = os.environ.get("GOOGLE_CLOUD_PROJECT")
# print('project_id', project_id)
project_id = "edufox-services"
client = secretmanager.SecretManagerServiceClient()

# service_account_name = f"projects/{project_id}/secrets/SERVICE_ACCOUNT/versions/latest"
# service_account_payload = client.access_secret_version(name=service_account_name).payload.data.decode("UTF-8")
# # print('SERVICE', service_account_payload)
# os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = "./edufox-services-898b64103ea1.json"

settings_name = os.environ.get("SETTINGS_NAME", "django_settings")

name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"

payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
# print('GOOGLE_CLOUD_PROJECT', payload)
env.read_env(io.StringIO(payload))

env.read_env(os.environ.get('GOOGLE_APPLICATION_CREDENTIALS'))
# else:
#     raise Exception("No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found.")


# SECURITY WARNING: keep the secret key used in production secret!
DEBUG = True
print('ENV_STATUS:', env.ENVIRON)

SECRET_KEY = env("SECRET_KEY")
GOOGLE_APPLICATION_CREDENTIALS = env('GOOGLE_APPLICATION_CREDENTIALS')

print('SECRET_KEY', GOOGLE_APPLICATION_CREDENTIALS)
print('USE_CLOUD_SQL_AUTH_PROXY', os.environ.get("USE_CLOUD_SQL_AUTH_PROXY"))

# SECURITY WARNING: don't run with debug turned on in production!

# SECURITY WARNING: It's recommended that you use this when
# running in production. The URL will be known once you first deploy
# to Cloud Run. This code takes the URL and converts it to both these settings formats.
CLOUDRUN_SERVICE_URL = env("CLOUDRUN_SERVICE_URL", default=None)
ALLOWED_HOSTS = []
CSRF_TRUSTED_ORIGINS = []
PROTOCOL = ""
DOMAIN = ""
# print('CLOUDRUN_SERVICE_URL: ', CLOUDRUN_SERVICE_URL)
if CLOUDRUN_SERVICE_URL:
    service_url = urlparse(CLOUDRUN_SERVICE_URL).netloc
    ALLOWED_HOSTS = [service_url]
    CSRF_TRUSTED_ORIGINS = [CLOUDRUN_SERVICE_URL]
    # SECURE_SSL_REDIRECT = True
    # SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    PROTOCOL = "https"
    DOMAIN = service_url
    os.environ['USE_CLOUD_SQL_AUTH_PROXY'] = None

else:
    ALLOWED_HOSTS = ["*"]
    PROTOCOL = "http"
    DOMAIN = "127.0.0.1:8000"

# ALLOWED_HOSTS = ["*"]
# PROTOCOL = "http"
# DOMAIN = "127.0.0.1:8000"

# print(ALLOWED_HOSTS)

CORS_ALLOW_ALL_ORIGINS = True
# CSRF_TRUSTED_ORIGINS = [
#     'https://edufox-api-service-5wasy3cpxq-uc.a.run.app',
#     'https://api-service-5wasy3cpxq-uc.a.run.app',
#     'http://127.0.0.1', 'https://localhost:8000',
#     'http://localhost:8000', 'https://127.0.0.1',
#  ]
# ALLOWED_HOSTS = [
#     'https://api-service-5wasy3cpxq-uc.a.run.app', 
#     'api-service-5wasy3cpxq-uc.a.run.app', '127.0.0.1',
#     'localhost:8000', 'localhost',
#     'https://edufox-api-service-5wasy3cpxq-uc.a.run.app',
#     'edufox-api-service-5wasy3cpxq-uc.a.run.app',
# ]

# CORS_ALLOWED_ORIGINS = [
#     'https://api-service-5wasy3cpxq-uc.a.run.app',
#     'http://localhost:8000',
#     'https://edufox-api-service-5wasy3cpxq-uc.a.run.app',
# ]
# CORS_ORIGIN_WHITELIST = [
#     'https://api-service-5wasy3cpxq-uc.a.run.app',
#     'https://localhost:8000', 'https://127.0.0.1',
#     'http://localhost:8000', 'http://127.0.0.1',
#     'https://edufox-api-service-5wasy3cpxq-uc.a.run.app',
#     'edufox-api-service-5wasy3cpxq-uc.a.run.app',
# ]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'student',
    'rest_framework',
    'rest_framework.authtoken',
    'djoser',
    # 'coreapi',
    # 'drf_yasg',
    'rest_framework_swagger',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'edufox.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['student/templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                    'staticfiles': 'django.templatetags.static',
                }
        },
    },
]

WSGI_APPLICATION = 'edufox.wsgi.application'
# DB_NAME=os.environ.get("DB_NAME")
# DB_PASSWORD=os.environ.get("DB_PASSWORD")
# DB_HOST=os.environ.get("DB_HOST")
# DB_PORT=os.environ.get("DB_PORT")
# DB_ENGINE = os.environ.get('DB_ENGINE')
# DATABASE_URL = os.environ.get('DATABASE_URL')

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# DATABASES = {
#     'default': {
#         DATABASE_URL: DATABASE_URL
#         # 'ENGINE': env('DB_ENGINE'),
#         # 'NAME': env('DB_NAME'),
#         # 'USER': env('DB_USER'),
#         # 'PASSWORD': env('DB_PASSWORD'),
#         # 'HOST': env('DB_HOST_TEST'),
#         # 'PORT': env('DB_PORT'),
#     }
# }



# Use django-environ to parse the connection string
DATABASES = {"default": env.db()}
USE_CLOUD_SQL_AUTH_PROXY = os.environ.get('USE_CLOUD_SQL_AUTH_PROXY')
# print(os.environ.get('USE_CLOUD_SQL_AUTH_PROXY', USE_CLOUD_SQL_AUTH_PROXY))

# If the flag as been set, configure to use proxy
if USE_CLOUD_SQL_AUTH_PROXY:
    DATABASES["default"]["HOST"] = "cloudsql-proxy"
    DATABASES["default"]["PORT"] = 5432

# Define static storage via django-storages[google]
GS_BUCKET_NAME = env("GS_BUCKET_NAME")
STATIC_URL = "/static/"
DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
# GS_DEFAULT_ACL = "publicRead"

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK =  {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],

    "DEFAULT_PERMISSION_CLASSES" : [
    'rest_framework.permissions.IsAuthenticated'
   ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'

}


DJOSER = {
    'SET_PASSWORD_RETRIES': 5,
    'PASSWORD_VALIDATORS': [
        {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
        {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
        {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
        {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
    ],
    "USER_ID_FIELD" : "username",
    'PASSWORD_RESET_CONFIRM_URL': 'password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': 'username/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': 'api/v1/auth/activate/{uid}/{token}',

    'SEND_ACTIVATION_EMAIL': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'PASSWORD_RESET_CONFIRM_EMAIL_SUBJECT_TEMPLATE': 'TESTING',
    'EMAIL': {
            'activation': 'student.views.ActivationEmail',
            'confirmation': 'student.views.ConfirmationEmail',

    },
    # 'SERIALIZERS': { 'user': 'student.serializers.StudentSerializer',},
}

# AUTH_USER_MODEL = 'student.Student'

LOGIN_URL = 'student:login'
LOGOUT_URL = 'student:logout'

# EMAIL_BACKEND = env('EMAIL_BACKEND')
# EMAIL_HOST = env('EMAIL_HOST')
# EMAIL_PORT = env('EMAIL_PORT')
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

# placeholder = (
#         f"SECRET_KEY=django-insecure-5xh$hw9%n$huk$mql=%r7p@dxefh9+hleb7yb$eo_6p)r*$dn^\n"
#         "GS_BUCKET_NAME=edufox-bucket\n"
#         "EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend\n"
#         "EMAIL_HOST=smtp.gmail.com\n"
#         "EMAIL_PORT=587\n"
#         "EMAIL_HOST_USER=app.edufox@gmail.com\n"
#         "EMAIL_HOST_PASSWORD=sofeipbagutmjhkc\n"
#         f"DATABASE_URL=postgres://admin:_edufox@123A@//cloudsql/edufox-services:us-central1:edufox-db-instance/edufox_db"
#     )


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
